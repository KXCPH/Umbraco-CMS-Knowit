using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Interfaces
{
    public interface ITextBuilderSubActions
    {
        string XmlCommentString(string input);

        void WriteInterfaceProperty(StringBuilder sb, PropertyModel property);

        // writes an attribute that identifies code generated by a tool
        // (helps reduce warnings, tools such as FxCop use it)
        // see https://github.com/zpqrtbnk/Zbu.ModelsBuilder/issues/107
        // see https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.generatedcodeattribute
        // see https://blogs.msdn.microsoft.com/codeanalysis/2007/04/27/correct-usage-of-the-compilergeneratedattribute-and-the-generatedcodeattribute/
        //
        // note that the blog post above clearly states that "Nor should it be applied at the type level if the type being generated is a partial class."
        // and since our models are partial classes, we have to apply the attribute against the individual members, not the class itself.
        void WriteGeneratedCodeAttribute(StringBuilder sb, string tabs);

        // writes an attribute that specifies that an output may be null.
        // (useful for consuming projects with nullable reference types enabled)
        void WriteMaybeNullAttribute(StringBuilder sb, string tabs, bool isReturn = false);

        void WriteMixinProperty(StringBuilder sb, PropertyModel property, string mixinClrName);

        void WriteProperty(StringBuilder sb, TypeModel type, PropertyModel property, string? mixinClrName = null);

        void WriteClrType(StringBuilder sb, Type type);

        void WriteNonGenericClrType(StringBuilder sb, string s);

        void WriteClrType(StringBuilder sb, string type);
    }
}
